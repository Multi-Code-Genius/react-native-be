generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  password         String?
  createdAt        DateTime       @default(now())
  name             String?
  profile_pic      String?
  dob              DateTime?
  mobileNumber     String?        @unique
  status           String         @default("active")
  updatedAt        DateTime       @default(now()) @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  location         Json?
  comments         Comment[]
  likes            Like[]
  posts            Post[]
  RejectedRoom     RejectedRoom[]
  RoomUser         RoomUser[]
  videos           Video[]
}

model Video {
  id          String    @id @default(uuid())
  title       String?
  description String?
  videoUrl    String
  thumbnail   String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
  user        User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  videoId   String?
  createdAt DateTime @default(now())
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  video     Video?   @relation(fields: [videoId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  videoId   String?
  createdAt DateTime @default(now())
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  video     Video?   @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
  @@unique([userId, postId])
}

model Post {
  id          String    @id @default(uuid())
  title       String?
  description String?
  post        String
  thumbnail   String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
  user        User      @relation(fields: [userId], references: [id])
}

model RejectedRoom {
  id         String   @id
  userId     String
  roomId     String
  rejectedAt DateTime @default(now())
  Room       Room     @relation(fields: [roomId], references: [id])
  User       User     @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
}

model Room {
  id           String         @id
  platform     String
  location     Json
  status       String         @default("open")
  createdAt    DateTime       @default(now())
  capacity     Int
  RejectedRoom RejectedRoom[]
  RoomUser     RoomUser[]
}

model RoomUser {
  id       String   @id
  userId   String
  roomId   String
  joinedAt DateTime @default(now())
  Room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
}
